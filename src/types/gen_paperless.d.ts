/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/bulk_edit_objects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Perform a bulk edit operation on a list of objects */
        post: operations["bulk_edit_objects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the application configuration */
        get: operations["config_list"];
        put?: never;
        post: operations["config_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["config_retrieve"];
        put: operations["config_update"];
        post?: never;
        delete: operations["config_destroy"];
        options?: never;
        head?: never;
        patch: operations["config_partial_update"];
        trace?: never;
    };
    "/api/correspondents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["correspondents_list"];
        put?: never;
        post: operations["correspondents_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/correspondents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["correspondents_retrieve"];
        put: operations["correspondents_update"];
        post?: never;
        delete: operations["correspondents_destroy"];
        options?: never;
        head?: never;
        patch: operations["correspondents_partial_update"];
        trace?: never;
    };
    "/api/custom_fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["custom_fields_list"];
        put?: never;
        post: operations["custom_fields_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/custom_fields/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["custom_fields_retrieve"];
        put: operations["custom_fields_update"];
        post?: never;
        delete: operations["custom_fields_destroy"];
        options?: never;
        head?: never;
        patch: operations["custom_fields_partial_update"];
        trace?: never;
    };
    "/api/document_types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["document_types_list"];
        put?: never;
        post: operations["document_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/document_types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["document_types_retrieve"];
        put: operations["document_types_update"];
        post?: never;
        delete: operations["document_types_destroy"];
        options?: never;
        head?: never;
        patch: operations["document_types_partial_update"];
        trace?: never;
    };
    "/api/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Pass a user object to serializer */
        get: operations["documents_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a single document */
        get: operations["documents_retrieve"];
        /** @description Pass a user object to serializer */
        put: operations["documents_update"];
        post?: never;
        /** @description Pass a user object to serializer */
        delete: operations["documents_destroy"];
        options?: never;
        head?: never;
        /** @description Pass a user object to serializer */
        patch: operations["documents_partial_update"];
        trace?: never;
    };
    "/api/documents/{id}/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Download the document */
        get: operations["documents_download_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Pass a user object to serializer */
        post: operations["documents_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document history */
        get: operations["documents_history_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/metadata/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document metadata */
        get: operations["documents_metadata_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View, add, or delete notes for the document */
        get: operations["documents_notes_retrieve"];
        put?: never;
        /** @description View, add, or delete notes for the document */
        post: operations["documents_notes_create"];
        /** @description View, add, or delete notes for the document */
        delete: operations["documents_notes_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/preview/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document preview */
        get: operations["documents_preview_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/share_links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View share links for the document */
        get: operations["document_share_links"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/suggestions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View suggestions for the document */
        get: operations["documents_suggestions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/thumb/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View the document thumbnail */
        get: operations["documents_thumb_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/bulk_download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["documents_bulk_download_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/bulk_edit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Perform a bulk edit operation on a list of documents */
        post: operations["bulk_edit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/next_asn/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Pass a user object to serializer */
        get: operations["documents_next_asn_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/post_document/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload a document via the API */
        post: operations["documents_post_document_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/selection_data/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get selection data for the selected documents */
        post: operations["documents_selection_data_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["groups_list"];
        put?: never;
        post: operations["groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["groups_retrieve"];
        put: operations["groups_update"];
        post?: never;
        delete: operations["groups_destroy"];
        options?: never;
        head?: never;
        patch: operations["groups_partial_update"];
        trace?: never;
    };
    "/api/logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Logs view */
        get: operations["logs_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Single log view */
        get: operations["retrieve_log"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_accounts_list"];
        put?: never;
        post: operations["mail_accounts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_accounts/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_accounts_retrieve"];
        put: operations["mail_accounts_update"];
        post?: never;
        delete: operations["mail_accounts_destroy"];
        options?: never;
        head?: never;
        patch: operations["mail_accounts_partial_update"];
        trace?: never;
    };
    "/api/mail_accounts/{id}/process/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["mail_accounts_process_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_accounts/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Test a mail account */
        post: operations["mail_account_test"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_rules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_rules_list"];
        put?: never;
        post: operations["mail_rules_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mail_rules/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mail_rules_retrieve"];
        put: operations["mail_rules_update"];
        post?: never;
        delete: operations["mail_rules_destroy"];
        options?: never;
        head?: never;
        patch: operations["mail_rules_partial_update"];
        trace?: never;
    };
    "/api/oauth/callback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Callback view for OAuth2 authentication */
        get: operations["oauth_callback_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User profile view, only available when logged in */
        get: operations["profile_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description User profile view, only available when logged in */
        patch: operations["profile_partial_update"];
        trace?: never;
    };
    "/api/profile/disconnect_social_account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Disconnects a social account provider from the user account */
        post: operations["profile_disconnect_social_account_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/generate_auth_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generates (or re-generates) an auth token, requires a logged in user
         *     unlike the default DRF endpoint */
        post: operations["profile_generate_auth_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/social_account_providers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List of social account providers */
        get: operations["profile_social_account_providers_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Generates a new TOTP secret and returns the URL and SVG */
        get: operations["profile_totp_retrieve"];
        put?: never;
        /** @description Validates a TOTP code and activates the TOTP authenticator */
        post: operations["profile_totp_create"];
        /** @description Deactivates the TOTP authenticator */
        delete: operations["profile_totp_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/remote_version/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current version of the Paperless-NGX server */
        get: operations["remote_version_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/saved_views/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["saved_views_list"];
        put?: never;
        post: operations["saved_views_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/saved_views/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["saved_views_retrieve"];
        put: operations["saved_views_update"];
        post?: never;
        delete: operations["saved_views_destroy"];
        options?: never;
        head?: never;
        patch: operations["saved_views_partial_update"];
        trace?: never;
    };
    "/api/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Global search */
        get: operations["search_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/autocomplete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of all available tags */
        get: operations["search_autocomplete_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share_links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["share_links_list"];
        put?: never;
        post: operations["share_links_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share_links/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["share_links_retrieve"];
        put: operations["share_links_update"];
        post?: never;
        delete: operations["share_links_destroy"];
        options?: never;
        head?: never;
        patch: operations["share_links_partial_update"];
        trace?: never;
    };
    "/api/statistics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get statistics for the current user */
        get: operations["statistics_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current system status of the Paperless-NGX server */
        get: operations["status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage_paths/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["storage_paths_list"];
        put?: never;
        post: operations["storage_paths_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage_paths/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["storage_paths_retrieve"];
        put: operations["storage_paths_update"];
        post?: never;
        /** @description When a storage path is deleted, see if documents
         *     using it require a rename/move */
        delete: operations["storage_paths_destroy"];
        options?: never;
        head?: never;
        patch: operations["storage_paths_partial_update"];
        trace?: never;
    };
    "/api/storage_paths/test/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Test storage path against a document */
        post: operations["storage_paths_test_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tags_list"];
        put?: never;
        post: operations["tags_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tags_retrieve"];
        put: operations["tags_update"];
        post?: never;
        delete: operations["tags_destroy"];
        options?: never;
        head?: never;
        patch: operations["tags_partial_update"];
        trace?: never;
    };
    "/api/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tasks_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tasks_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/acknowledge/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Acknowledge a list of tasks */
        post: operations["acknowledge_tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/run/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["tasks_run_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/trash/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["trash_list"];
        put?: never;
        post: operations["trash_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ui_settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ui_settings_retrieve"];
        put?: never;
        post: operations["ui_settings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_list"];
        put?: never;
        post: operations["users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["users_retrieve"];
        put: operations["users_update"];
        post?: never;
        delete: operations["users_destroy"];
        options?: never;
        head?: never;
        patch: operations["users_partial_update"];
        trace?: never;
    };
    "/api/users/{id}/deactivate_totp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["users_deactivate_totp_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_actions_list"];
        put?: never;
        post: operations["workflow_actions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_actions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_actions_retrieve"];
        put: operations["workflow_actions_update"];
        post?: never;
        delete: operations["workflow_actions_destroy"];
        options?: never;
        head?: never;
        patch: operations["workflow_actions_partial_update"];
        trace?: never;
    };
    "/api/workflow_triggers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_triggers_list"];
        put?: never;
        post: operations["workflow_triggers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_triggers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflow_triggers_retrieve"];
        put: operations["workflow_triggers_update"];
        post?: never;
        delete: operations["workflow_triggers_destroy"];
        options?: never;
        head?: never;
        patch: operations["workflow_triggers_partial_update"];
        trace?: never;
    };
    "/api/workflows/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflows_list"];
        put?: never;
        post: operations["workflows_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflows_retrieve"];
        put: operations["workflows_update"];
        post?: never;
        delete: operations["workflows_destroy"];
        options?: never;
        head?: never;
        patch: operations["workflows_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description * `1` - IMAP
         *     * `2` - Gmail-OAuth
         *     * `3` - Outlook-OAuth
         * @enum {integer}
         */
        AccountTypeEnum: 1 | 2 | 3;
        AcknowledgeTasks: {
            result: number;
        };
        Actor: {
            id: number;
            username: string;
        };
        ApplicationConfiguration: {
            readonly id: number;
            user_args: unknown;
            /** Legt den PDF-Typ der Ausgabedatei fest */
            output_type?: (components["schemas"]["OutputTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * OCR von Seite 1 bis zu diesem Wert durchführen
             * Format: int64
             */
            pages?: number | null;
            /** OCR für diese Sprachen durchführen */
            language?: string | null;
            /** Legt den OCR-Modus fest */
            mode?: (components["schemas"]["ModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Steuert die Erzeugung einer Archivdatei */
            skip_archive_file?: (components["schemas"]["SkipArchiveFileEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Setzt den Bild-DPI Fallback-Wert
             * Format: int64
             */
            image_dpi?: number | null;
            /** Steuert die unpaper-Bereinigung */
            unpaper_clean?: (components["schemas"]["UnpaperCleanEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Aktiviert die Schräglagenkorrektur */
            deskew?: boolean | null;
            /** Aktiviert Seitenrotation */
            rotate_pages?: boolean | null;
            /**
             * Legt die Schwelle für die Seitenrotation fest
             * Format: double
             */
            rotate_pages_threshold?: number | null;
            /**
             * Legt die maximale Bildgröße für die Dekomprimierung fest
             * Format: double
             */
            max_image_pixels?: number | null;
            /** Legt die Ghostscript-Farbkonvertierungsstrategie fest */
            color_conversion_strategy?: (components["schemas"]["ColorConversionStrategyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Anwendungstitel */
            app_title?: string | null;
            /**
             * Anwendungslogo
             * Format: uri
             */
            app_logo?: string | null;
        };
        ApplicationConfigurationRequest: {
            user_args: unknown;
            /** Legt den PDF-Typ der Ausgabedatei fest */
            output_type?: (components["schemas"]["OutputTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * OCR von Seite 1 bis zu diesem Wert durchführen
             * Format: int64
             */
            pages?: number | null;
            /** OCR für diese Sprachen durchführen */
            language?: string | null;
            /** Legt den OCR-Modus fest */
            mode?: (components["schemas"]["ModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Steuert die Erzeugung einer Archivdatei */
            skip_archive_file?: (components["schemas"]["SkipArchiveFileEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Setzt den Bild-DPI Fallback-Wert
             * Format: int64
             */
            image_dpi?: number | null;
            /** Steuert die unpaper-Bereinigung */
            unpaper_clean?: (components["schemas"]["UnpaperCleanEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Aktiviert die Schräglagenkorrektur */
            deskew?: boolean | null;
            /** Aktiviert Seitenrotation */
            rotate_pages?: boolean | null;
            /**
             * Legt die Schwelle für die Seitenrotation fest
             * Format: double
             */
            rotate_pages_threshold?: number | null;
            /**
             * Legt die maximale Bildgröße für die Dekomprimierung fest
             * Format: double
             */
            max_image_pixels?: number | null;
            /** Legt die Ghostscript-Farbkonvertierungsstrategie fest */
            color_conversion_strategy?: (components["schemas"]["ColorConversionStrategyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Anwendungstitel */
            app_title?: string | null;
            /**
             * Anwendungslogo
             * Format: binary
             */
            app_logo?: string | null;
        };
        /**
         * @description * `1` - Keinen Korrespondenten zuweisen
         *     * `2` - E-Mail-Adresse verwenden
         *     * `3` - Absendername verwenden (oder E-Mail-Adresse, wenn nicht verfügbar)
         *     * `4` - Nachfolgend ausgewählten Korrespondent verwenden
         * @enum {integer}
         */
        AssignCorrespondentFromEnum: 1 | 2 | 3 | 4;
        /**
         * @description * `1` - Betreff als Titel verwenden
         *     * `2` - Dateiname des Anhangs als Titel verwenden
         *     * `3` - Titel nicht aus Regel zuweisen
         * @enum {integer}
         */
        AssignTitleFromEnum: 1 | 2 | 3;
        /**
         * @description * `1` - Nur Anhänge verarbeiten.
         *     * `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
         * @enum {integer}
         */
        AttachmentTypeEnum: 1 | 2;
        BasicUser: {
            readonly id: number;
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            username: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
        };
        BasicUserRequest: {
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            username: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
        };
        /** @enum {unknown} */
        BlankEnum: "";
        BulkDownload: {
            /** @default archive */
            content: components["schemas"]["ContentEnum"];
            /** @default none */
            compression: components["schemas"]["CompressionEnum"];
            /** @default false */
            follow_formatting: boolean;
        };
        BulkDownloadRequest: {
            documents: number[];
            /** @default archive */
            content: components["schemas"]["ContentEnum"];
            /** @default none */
            compression: components["schemas"]["CompressionEnum"];
            /** @default false */
            follow_formatting: boolean;
        };
        BulkEditDocumentsResult: {
            result: string;
        };
        BulkEditObjectsRequest: {
            objects: number[];
            object_type: components["schemas"]["ObjectTypeEnum"];
            operation: components["schemas"]["OperationEnum"];
            owner?: number | null;
            /** Set permissions */
            permissions?: {
                [key: string]: unknown;
            };
            /** @default false */
            merge: boolean;
        };
        BulkEditRequest: {
            documents: number[];
            method: components["schemas"]["MethodEnum"];
            /** @default {} */
            parameters: {
                [key: string]: unknown;
            };
        };
        BulkEditResult: {
            result: string;
        };
        Classifier: {
            status: string;
            error: string;
            /** Format: date-time */
            last_trained: string;
        };
        /**
         * @description * `LeaveColorUnchanged` - LeaveColorUnchanged
         *     * `RGB` - RGB
         *     * `UseDeviceIndependentColor` - UseDeviceIndependentColor
         *     * `Gray` - Grau
         *     * `CMYK` - CMYK
         * @enum {string}
         */
        ColorConversionStrategyEnum: "LeaveColorUnchanged" | "RGB" | "UseDeviceIndependentColor" | "Gray" | "CMYK";
        /**
         * @description * `none` - none
         *     * `deflated` - deflated
         *     * `bzip2` - bzip2
         *     * `lzma` - lzma
         * @enum {string}
         */
        CompressionEnum: "none" | "deflated" | "bzip2" | "lzma";
        /**
         * @description * `1` - Nur Anhänge verarbeiten.
         *     * `2` - Vollständige E-Mail (mit eingebetteten Anhängen in der Datei) als .eml verarbeiten
         *     * `3` - Vollständige Mail (mit eingebetteten Anhängen in der Datei) als .eml verarbeiten + Anhänge als separate Dokumente verarbeiten
         * @enum {integer}
         */
        ConsumptionScopeEnum: 1 | 2 | 3;
        /**
         * @description * `archive` - archive
         *     * `originals` - originals
         *     * `both` - both
         * @enum {string}
         */
        ContentEnum: "archive" | "originals" | "both";
        Correspondent: {
            readonly id: number;
            readonly slug: string;
            name: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            readonly document_count: number;
            /** Format: date-time */
            readonly last_correspondence: string;
            /** Eigentümer */
            owner?: number | null;
            readonly permissions: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            readonly user_can_change: boolean;
        };
        CorrespondentCounts: {
            id: number;
            document_count: number;
        };
        CorrespondentRequest: {
            name: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        CustomField: {
            readonly id: number;
            name: string;
            data_type: components["schemas"]["DataTypeEnum"];
            /**
             * Weitere Daten
             * @description Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen
             */
            extra_data?: unknown;
            readonly document_count: number;
        };
        CustomFieldCounts: {
            id: number;
            document_count: number;
        };
        CustomFieldInstance: {
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            value: (string | number | {
                [key: string]: unknown;
            }) | null;
            field: number;
        };
        CustomFieldInstanceRequest: {
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            value: (string | number | {
                [key: string]: unknown;
            }) | null;
            field: number;
        };
        CustomFieldRequest: {
            name: string;
            data_type: components["schemas"]["DataTypeEnum"];
            /**
             * Weitere Daten
             * @description Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen
             */
            extra_data?: unknown;
        };
        /**
         * @description * `string` - string
         *     * `url` - url
         *     * `date` - date
         *     * `boolean` - boolean
         *     * `integer` - integer
         *     * `float` - float
         *     * `monetary` - monetary
         *     * `documentlink` - documentlink
         *     * `select` - select
         * @enum {string}
         */
        DataTypeEnum: "string" | "url" | "date" | "boolean" | "integer" | "float" | "monetary" | "documentlink" | "select";
        Database: {
            type: string;
            url: string;
            status: string;
            error: string;
            migration_status: components["schemas"]["MigrationStatus"];
        };
        /**
         * @description * `table` - Tabelle
         *     * `smallCards` - Kleine Karten
         *     * `largeCards` - Große Karten
         * @enum {string}
         */
        DisplayModeEnum: "table" | "smallCards" | "largeCards";
        /** @description Adds update nested feature */
        Document: {
            readonly id: number;
            correspondent: number | null;
            document_type: number | null;
            storage_path: number | null;
            /** Titel */
            title?: string;
            /**
             * Inhalt
             * @description Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.
             */
            content?: string;
            tags: number[];
            /**
             * Erstellt
             * Format: date-time
             */
            created?: string;
            /** Format: date */
            created_date?: string;
            /**
             * Geändert
             * Format: date-time
             */
            readonly modified: string;
            /**
             * Hinzugefügt
             * Format: date-time
             */
            readonly added: string;
            /** Format: date-time */
            deleted_at?: string | null;
            /**
             * Archiv-Seriennummer
             * Format: int64
             * @description Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.
             */
            archive_serial_number?: number | null;
            readonly original_file_name: string | null;
            readonly archived_file_name: string | null;
            owner?: number | null;
            readonly permissions: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            readonly user_can_change: boolean;
            readonly is_shared_by_requester: boolean;
            readonly notes: components["schemas"]["Notes"][];
            custom_fields?: components["schemas"]["CustomFieldInstance"][];
            readonly page_count: number | null;
            /** MIME-Typ */
            readonly mime_type: string;
        };
        DocumentListRequest: {
            documents: number[];
        };
        /** @description Adds update nested feature */
        DocumentRequest: {
            correspondent: number | null;
            document_type: number | null;
            storage_path: number | null;
            /** Titel */
            title?: string;
            /**
             * Inhalt
             * @description Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.
             */
            content?: string;
            tags: number[];
            /**
             * Erstellt
             * Format: date-time
             */
            created?: string;
            /** Format: date */
            created_date?: string;
            /** Format: date-time */
            deleted_at?: string | null;
            /**
             * Archiv-Seriennummer
             * Format: int64
             * @description Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.
             */
            archive_serial_number?: number | null;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            custom_fields?: components["schemas"]["CustomFieldInstanceRequest"][];
            /** @default false */
            remove_inbox_tags: boolean | null;
        };
        DocumentType: {
            readonly id: number;
            readonly slug: string;
            name: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            readonly document_count: number;
            /** Eigentümer */
            owner?: number | null;
            readonly permissions: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            readonly user_can_change: boolean;
        };
        DocumentTypeCounts: {
            id: number;
            document_count: number;
        };
        DocumentTypeRequest: {
            name: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        /**
         * @description * `archive` - Archiv
         *     * `original` - Original
         * @enum {string}
         */
        FileVersionEnum: "archive" | "original";
        Group: {
            readonly id: number;
            name: string;
            permissions: string[];
        };
        GroupRequest: {
            name: string;
            permissions: string[];
        };
        /**
         * @description * `1` - Keine Verschlüsselung
         *     * `2` - SSL verwenden
         *     * `3` - STARTTLS verwenden
         * @enum {integer}
         */
        ImapSecurityEnum: 1 | 2 | 3;
        Index: {
            status: string;
            error: string;
            /** Format: date-time */
            last_modified: string;
        };
        LogEntry: {
            id: number;
            /** Format: date-time */
            timestamp: string;
            action: string;
            changes: {
                [key: string]: unknown;
            };
            actor: components["schemas"]["Actor"];
        };
        MailAccount: {
            readonly id: number;
            name: string;
            imap_server: string;
            /**
             * Format: int64
             * @description Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.
             */
            imap_port?: number | null;
            /** IMAP-Sicherheit */
            imap_security?: components["schemas"]["ImapSecurityEnum"];
            /** Benutzername */
            username: string;
            password: string;
            /**
             * Zeichensatz
             * @description Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.
             */
            character_set?: string;
            /** Ist Tokenauthentifizierung */
            is_token?: boolean;
            /** Eigentümer */
            owner?: number | null;
            readonly user_can_change: boolean;
            /** Kontotyp */
            account_type?: components["schemas"]["AccountTypeEnum"];
            /**
             * Ablauf
             * Format: date-time
             * @description Das Ablaufdatum des Aktualisierungstokens.
             */
            expiration?: string | null;
        };
        MailAccountRequest: {
            name: string;
            imap_server: string;
            /**
             * Format: int64
             * @description Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.
             */
            imap_port?: number | null;
            /** IMAP-Sicherheit */
            imap_security?: components["schemas"]["ImapSecurityEnum"];
            /** Benutzername */
            username: string;
            password: string;
            /**
             * Zeichensatz
             * @description Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.
             */
            character_set?: string;
            /** Ist Tokenauthentifizierung */
            is_token?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            /** Kontotyp */
            account_type?: components["schemas"]["AccountTypeEnum"];
            /**
             * Ablauf
             * Format: date-time
             * @description Das Ablaufdatum des Aktualisierungstokens.
             */
            expiration?: string | null;
        };
        MailAccountTestResponse: {
            success: boolean;
        };
        MailRule: {
            readonly id: number;
            name: string;
            account: number;
            /** Aktiviert */
            enabled?: boolean;
            /**
             * Ordner
             * @description Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.
             */
            folder?: string;
            /** Absender filtern */
            filter_from?: string | null;
            /** Empfänger filtern */
            filter_to?: string | null;
            /** Betreff filtern */
            filter_subject?: string | null;
            /** Nachrichteninhalt filtern */
            filter_body?: string | null;
            /**
             * Filter: Anhang-Dateiname (inklusiv)
             * @description Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_attachment_filename_include?: string | null;
            /**
             * Filter: Anhang-Dateiname (exklusiv)
             * @description Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_attachment_filename_exclude?: string | null;
            /**
             * Maximales Alter
             * Format: int64
             * @description Angegeben in Tagen.
             */
            maximum_age?: number;
            /** Aktion */
            action?: components["schemas"]["MailRuleActionEnum"];
            /** @default  */
            action_parameter: string | null;
            /** Titel zuweisen von */
            assign_title_from?: components["schemas"]["AssignTitleFromEnum"];
            assign_tags?: (number | null)[];
            /** Korrespondent zuweisen von */
            assign_correspondent_from?: components["schemas"]["AssignCorrespondentFromEnum"];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            /** Dokumenten den Regeleigentümer zuweisen */
            assign_owner_from_rule?: boolean;
            order?: number;
            /**
             * Dateianhangstyp
             * @description „Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
             *
             *     * `1` - Nur Anhänge verarbeiten.
             *     * `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
             */
            attachment_type?: components["schemas"]["AttachmentTypeEnum"];
            /** Verarbeitungsumfang */
            consumption_scope?: components["schemas"]["ConsumptionScopeEnum"];
            pdf_layout?: components["schemas"]["PdfLayoutEnum"];
            /** Eigentümer */
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        /**
         * @description * `1` - Löschen
         *     * `2` - In angegebenen Ordner verschieben
         *     * `3` - Als gelesen markieren, gelesene E-Mails nicht verarbeiten
         *     * `4` - Als wichtig markieren, markierte E-Mails nicht verarbeiten
         *     * `5` - Markiere die E-Mail mit dem angegebenen Tag, verarbeite markierte E-Mails nicht
         * @enum {integer}
         */
        MailRuleActionEnum: 1 | 2 | 3 | 4 | 5;
        MailRuleRequest: {
            name: string;
            account: number;
            /** Aktiviert */
            enabled?: boolean;
            /**
             * Ordner
             * @description Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.
             */
            folder?: string;
            /** Absender filtern */
            filter_from?: string | null;
            /** Empfänger filtern */
            filter_to?: string | null;
            /** Betreff filtern */
            filter_subject?: string | null;
            /** Nachrichteninhalt filtern */
            filter_body?: string | null;
            /**
             * Filter: Anhang-Dateiname (inklusiv)
             * @description Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_attachment_filename_include?: string | null;
            /**
             * Filter: Anhang-Dateiname (exklusiv)
             * @description Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_attachment_filename_exclude?: string | null;
            /**
             * Maximales Alter
             * Format: int64
             * @description Angegeben in Tagen.
             */
            maximum_age?: number;
            /** Aktion */
            action?: components["schemas"]["MailRuleActionEnum"];
            /** @default  */
            action_parameter: string | null;
            /** Titel zuweisen von */
            assign_title_from?: components["schemas"]["AssignTitleFromEnum"];
            assign_tags?: (number | null)[];
            /** Korrespondent zuweisen von */
            assign_correspondent_from?: components["schemas"]["AssignCorrespondentFromEnum"];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            /** Dokumenten den Regeleigentümer zuweisen */
            assign_owner_from_rule?: boolean;
            order?: number;
            /**
             * Dateianhangstyp
             * @description „Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
             *
             *     * `1` - Nur Anhänge verarbeiten.
             *     * `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
             */
            attachment_type?: components["schemas"]["AttachmentTypeEnum"];
            /** Verarbeitungsumfang */
            consumption_scope?: components["schemas"]["ConsumptionScopeEnum"];
            pdf_layout?: components["schemas"]["PdfLayoutEnum"];
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        /**
         * @description * `0` - Keiner
         *     * `1` - Irgendein Wort
         *     * `2` - Alle Wörter
         *     * `3` - Exakte Übereinstimmung
         *     * `4` - Regulärer Ausdruck
         *     * `5` - Ungenaues Wort
         *     * `6` - Automatisch
         * @enum {integer}
         */
        MatchingAlgorithm: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        Metadata: {
            original_checksum: string;
            original_size: number;
            original_mime_type: string;
            media_filename: string;
            has_archive_version: boolean;
            original_metadata: {
                [key: string]: unknown;
            };
            archive_checksum: string;
            archive_media_filename: string;
            original_filename: string;
            archive_size: number;
            archive_metadata: {
                [key: string]: unknown;
            };
            lang: string;
        };
        /**
         * @description * `set_correspondent` - set_correspondent
         *     * `set_document_type` - set_document_type
         *     * `set_storage_path` - set_storage_path
         *     * `add_tag` - add_tag
         *     * `remove_tag` - remove_tag
         *     * `modify_tags` - modify_tags
         *     * `modify_custom_fields` - modify_custom_fields
         *     * `delete` - delete
         *     * `reprocess` - reprocess
         *     * `set_permissions` - set_permissions
         *     * `rotate` - rotate
         *     * `merge` - merge
         *     * `split` - split
         *     * `delete_pages` - delete_pages
         * @enum {string}
         */
        MethodEnum: "set_correspondent" | "set_document_type" | "set_storage_path" | "add_tag" | "remove_tag" | "modify_tags" | "modify_custom_fields" | "delete" | "reprocess" | "set_permissions" | "rotate" | "merge" | "split" | "delete_pages";
        MigrationStatus: {
            latest_migration: string;
            unapplied_migrations: string[];
        };
        /**
         * @description * `skip` - überspringen
         *     * `redo` - wiederholen
         *     * `force` - erzwingen
         *     * `skip_noarchive` - skip_noarchive
         * @enum {string}
         */
        ModeEnum: "skip" | "redo" | "force" | "skip_noarchive";
        Notes: {
            readonly id: number;
            /**
             * Inhalt
             * @description Notiz für das Dokument
             */
            note?: string;
            /**
             * Erstellt
             * Format: date-time
             */
            created?: string;
            readonly user: components["schemas"]["BasicUser"];
        };
        NotesRequest: {
            /**
             * Inhalt
             * @description Notiz für das Dokument
             */
            note?: string;
            /**
             * Erstellt
             * Format: date-time
             */
            created?: string;
        };
        /** @enum {unknown} */
        NullEnum: null;
        /**
         * @description * `tags` - tags
         *     * `correspondents` - correspondents
         *     * `document_types` - document_types
         *     * `storage_paths` - storage_paths
         * @enum {string}
         */
        ObjectTypeEnum: "tags" | "correspondents" | "document_types" | "storage_paths";
        /**
         * @description * `set_permissions` - set_permissions
         *     * `delete` - delete
         * @enum {string}
         */
        OperationEnum: "set_permissions" | "delete";
        /**
         * @description * `pdf` - pdf
         *     * `pdfa` - pdfa
         *     * `pdfa-1` - pdfa-1
         *     * `pdfa-2` - pdfa-2
         *     * `pdfa-3` - pdfa-3
         * @enum {string}
         */
        OutputTypeEnum: "pdf" | "pdfa" | "pdfa-1" | "pdfa-2" | "pdfa-3";
        PaginatedCorrespondentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Correspondent"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedCustomFieldList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["CustomField"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedDocumentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Document"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedDocumentTypeList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["DocumentType"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedGroupList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Group"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedLogEntryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["LogEntry"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedMailAccountList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MailAccount"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedMailRuleList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MailRule"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedSavedViewList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["SavedView"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedShareLinkList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ShareLink"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedStoragePathList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["StoragePath"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedTagList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Tag"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedUserList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["User"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedWorkflowActionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["WorkflowAction"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedWorkflowList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Workflow"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaginatedWorkflowTriggerList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["WorkflowTrigger"][];
            /** @example [1, 2, 3] */
            all?: unknown[];
        };
        PaperlessAuthToken: {
            readonly token: string;
        };
        PaperlessAuthTokenRequest: {
            /** Anmeldename */
            username: string;
            /** Passwort */
            password: string;
            /** MFA Code */
            code?: string;
        };
        PatchedApplicationConfigurationRequest: {
            user_args?: unknown;
            /** Legt den PDF-Typ der Ausgabedatei fest */
            output_type?: (components["schemas"]["OutputTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * OCR von Seite 1 bis zu diesem Wert durchführen
             * Format: int64
             */
            pages?: number | null;
            /** OCR für diese Sprachen durchführen */
            language?: string | null;
            /** Legt den OCR-Modus fest */
            mode?: (components["schemas"]["ModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Steuert die Erzeugung einer Archivdatei */
            skip_archive_file?: (components["schemas"]["SkipArchiveFileEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Setzt den Bild-DPI Fallback-Wert
             * Format: int64
             */
            image_dpi?: number | null;
            /** Steuert die unpaper-Bereinigung */
            unpaper_clean?: (components["schemas"]["UnpaperCleanEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Aktiviert die Schräglagenkorrektur */
            deskew?: boolean | null;
            /** Aktiviert Seitenrotation */
            rotate_pages?: boolean | null;
            /**
             * Legt die Schwelle für die Seitenrotation fest
             * Format: double
             */
            rotate_pages_threshold?: number | null;
            /**
             * Legt die maximale Bildgröße für die Dekomprimierung fest
             * Format: double
             */
            max_image_pixels?: number | null;
            /** Legt die Ghostscript-Farbkonvertierungsstrategie fest */
            color_conversion_strategy?: (components["schemas"]["ColorConversionStrategyEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Anwendungstitel */
            app_title?: string | null;
            /**
             * Anwendungslogo
             * Format: binary
             */
            app_logo?: string | null;
        };
        PatchedCorrespondentRequest: {
            name?: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedCustomFieldRequest: {
            name?: string;
            data_type?: components["schemas"]["DataTypeEnum"];
            /**
             * Weitere Daten
             * @description Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen
             */
            extra_data?: unknown;
        };
        /** @description Adds update nested feature */
        PatchedDocumentRequest: {
            correspondent?: number | null;
            document_type?: number | null;
            storage_path?: number | null;
            /** Titel */
            title?: string;
            /**
             * Inhalt
             * @description Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.
             */
            content?: string;
            tags?: number[];
            /**
             * Erstellt
             * Format: date-time
             */
            created?: string;
            /** Format: date */
            created_date?: string;
            /** Format: date-time */
            deleted_at?: string | null;
            /**
             * Archiv-Seriennummer
             * Format: int64
             * @description Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.
             */
            archive_serial_number?: number | null;
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            custom_fields?: components["schemas"]["CustomFieldInstanceRequest"][];
            /** @default false */
            remove_inbox_tags: boolean | null;
        };
        PatchedDocumentTypeRequest: {
            name?: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedGroupRequest: {
            name?: string;
            permissions?: string[];
        };
        PatchedMailAccountRequest: {
            name?: string;
            imap_server?: string;
            /**
             * Format: int64
             * @description Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.
             */
            imap_port?: number | null;
            /** IMAP-Sicherheit */
            imap_security?: components["schemas"]["ImapSecurityEnum"];
            /** Benutzername */
            username?: string;
            password?: string;
            /**
             * Zeichensatz
             * @description Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.
             */
            character_set?: string;
            /** Ist Tokenauthentifizierung */
            is_token?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
            /** Kontotyp */
            account_type?: components["schemas"]["AccountTypeEnum"];
            /**
             * Ablauf
             * Format: date-time
             * @description Das Ablaufdatum des Aktualisierungstokens.
             */
            expiration?: string | null;
        };
        PatchedMailRuleRequest: {
            name?: string;
            account?: number;
            /** Aktiviert */
            enabled?: boolean;
            /**
             * Ordner
             * @description Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.
             */
            folder?: string;
            /** Absender filtern */
            filter_from?: string | null;
            /** Empfänger filtern */
            filter_to?: string | null;
            /** Betreff filtern */
            filter_subject?: string | null;
            /** Nachrichteninhalt filtern */
            filter_body?: string | null;
            /**
             * Filter: Anhang-Dateiname (inklusiv)
             * @description Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_attachment_filename_include?: string | null;
            /**
             * Filter: Anhang-Dateiname (exklusiv)
             * @description Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_attachment_filename_exclude?: string | null;
            /**
             * Maximales Alter
             * Format: int64
             * @description Angegeben in Tagen.
             */
            maximum_age?: number;
            /** Aktion */
            action?: components["schemas"]["MailRuleActionEnum"];
            /** @default  */
            action_parameter: string | null;
            /** Titel zuweisen von */
            assign_title_from?: components["schemas"]["AssignTitleFromEnum"];
            assign_tags?: (number | null)[];
            /** Korrespondent zuweisen von */
            assign_correspondent_from?: components["schemas"]["AssignCorrespondentFromEnum"];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            /** Dokumenten den Regeleigentümer zuweisen */
            assign_owner_from_rule?: boolean;
            order?: number;
            /**
             * Dateianhangstyp
             * @description „Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
             *
             *     * `1` - Nur Anhänge verarbeiten.
             *     * `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
             */
            attachment_type?: components["schemas"]["AttachmentTypeEnum"];
            /** Verarbeitungsumfang */
            consumption_scope?: components["schemas"]["ConsumptionScopeEnum"];
            pdf_layout?: components["schemas"]["PdfLayoutEnum"];
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedProfileRequest: {
            /** Format: email */
            email?: string;
            password?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
        };
        PatchedSavedViewRequest: {
            name?: string;
            /** Auf Startseite zeigen */
            show_on_dashboard?: boolean;
            /** In Seitenleiste zeigen */
            show_in_sidebar?: boolean;
            /** Sortierfeld */
            sort_field?: string | null;
            /** Umgekehrte Sortierung */
            sort_reverse?: boolean;
            filter_rules?: components["schemas"]["SavedViewFilterRuleRequest"][];
            /**
             * Ansichts-Seitengröße
             * Format: int64
             */
            page_size?: number | null;
            /** Ansichts-Anzeigemodus */
            display_mode?: (components["schemas"]["DisplayModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Angezeigte Dokumentenfelder */
            display_fields?: unknown;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedShareLinkRequest: {
            /**
             * Ablauf
             * Format: date-time
             */
            expiration?: string | null;
            /** Dokument */
            document?: number;
            file_version?: components["schemas"]["FileVersionEnum"];
        };
        PatchedStoragePathRequest: {
            name?: string;
            /** Pfad */
            path?: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedTagRequest: {
            name?: string;
            /** Farbe */
            color?: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /**
             * Posteingangs-Tag
             * @description Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.
             */
            is_inbox_tag?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        PatchedUserRequest: {
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            username?: string;
            /**
             * E-Mail-Adresse
             * Format: email
             */
            email?: string;
            password?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            /**
             * Registrierdatum
             * Format: date-time
             */
            date_joined?: string;
            /**
             * Mitarbeiter-Status
             * @description Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
             */
            is_staff?: boolean;
            /**
             * Aktiv
             * @description Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
             */
            is_active?: boolean;
            /**
             * Administrator-Status
             * @description Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
             */
            is_superuser?: boolean;
            /**
             * Gruppen
             * @description Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
             */
            groups?: number[];
            user_permissions?: string[];
        };
        PatchedWorkflowActionRequest: {
            id?: number | null;
            /** Arbeitsablauf-Aktionstyp */
            type?: components["schemas"]["WorkflowActionTypeEnum"];
            /**
             * Titel zuweisen
             * @description Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.
             */
            assign_title?: string | null;
            assign_tags?: (number | null)[];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            assign_storage_path?: number | null;
            /** Diesen Eigentümer zuordnen */
            assign_owner?: number | null;
            /** Diesen Benutzern Anzeigeberechtigungen erteilen */
            assign_view_users?: number[];
            /** Diesen Gruppen Anzeigeberechtigungen erteilen */
            assign_view_groups?: number[];
            /** Diesen Benutzern Bearbeitungsberechtigungen erteilen */
            assign_change_users?: number[];
            /** Diesen Gruppen Bearbeitungsberechtigungen erteilen */
            assign_change_groups?: number[];
            /** Diese benutzerdefinierten Felder zuweisen */
            assign_custom_fields?: number[];
            /**
             * Benutzerdefinierte Feldwerte
             * @description Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.
             */
            assign_custom_fields_values?: unknown;
            /** Alle Tags entfernen */
            remove_all_tags?: boolean;
            /** Diese(n) Tag(s) entfernen */
            remove_tags?: number[];
            /** Alle Korrespondenten entfernen */
            remove_all_correspondents?: boolean;
            /** Diese(n) Korrespondenten entfernen */
            remove_correspondents?: number[];
            /** Alle Dokumenttypen entfernen */
            remove_all_document_types?: boolean;
            /** Diese(n) Dokumenttyp(en) entfernen */
            remove_document_types?: number[];
            /** Alle Speicherpfade entfernen */
            remove_all_storage_paths?: boolean;
            /** Diese(n) Speicherpfad(e) entfernen */
            remove_storage_paths?: number[];
            /** Diese benutzerdefinierten Felder entfernen */
            remove_custom_fields?: number[];
            /** Alle benutzerdefinierten Felder entfernen */
            remove_all_custom_fields?: boolean;
            /** Alle Eigentümer entfernen */
            remove_all_owners?: boolean;
            /** Diese(n) Eigentümer entfernen */
            remove_owners?: number[];
            /** Alle Berechtigungen entfernen */
            remove_all_permissions?: boolean;
            /** Anzeigeberechtigungen für diese Benutzer entfernen */
            remove_view_users?: number[];
            /** Anzeigeberechtigungen für diese Gruppen entfernen */
            remove_view_groups?: number[];
            /** Bearbeitungsberechtigungen für diese Benutzer entfernen */
            remove_change_users?: number[];
            /** Bearbeitungsberechtigungen für diese Gruppen entfernen */
            remove_change_groups?: number[];
            email?: components["schemas"]["WorkflowActionEmailRequest"] | null;
            webhook?: components["schemas"]["WorkflowActionWebhookRequest"] | null;
        };
        PatchedWorkflowRequest: {
            name?: string;
            order?: number;
            /** Aktiviert */
            enabled?: boolean;
            triggers?: components["schemas"]["WorkflowTriggerRequest"][];
            actions?: components["schemas"]["WorkflowActionRequest"][];
        };
        PatchedWorkflowTriggerRequest: {
            id?: number | null;
            /** @default [
             *       1,
             *       2,
             *       3
             *     ] */
            sources: components["schemas"]["SourcesEnum"][];
            /** Trigger Type */
            type?: components["schemas"]["WorkflowTriggerTypeEnum"];
            /**
             * Pfad filtern
             * @description Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_path?: string | null;
            /**
             * Dateinamen filtern
             * @description Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_filename?: string | null;
            /** Dokumente aus dieser E-Mail-Regel filtern */
            filter_mailrule?: number | null;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["WorkflowTriggerMatchingAlgorithmEnum"];
            /** Zuweisungsmuster */
            match?: string;
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Hat diese(n) Tag(s) */
            filter_has_tags?: number[];
            /** Hat diesen Korrespondenten */
            filter_has_correspondent?: number | null;
            /** Hat diesen Dokumenttyp */
            filter_has_document_type?: number | null;
            /**
             * Zeitplanversatz (Tage)
             * Format: int64
             * @description Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.
             */
            schedule_offset_days?: number;
            /**
             * Zeitplan wiederholt sich
             * @description Ob der Zeitplan wiederholt werden soll.
             */
            schedule_is_recurring?: boolean;
            /**
             * Zeitplan-Wiederholungsverzögerung in Tagen
             * Format: int64
             * @description Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.
             */
            schedule_recurring_interval_days?: number;
            /**
             * Zeitplan-Datumsfeld
             * @description Das zu prüfende Feld für einen Zeitplanauslöser.
             *
             *     * `added` - Hinzugefügt
             *     * `created` - Ausgestellt
             *     * `modified` - Geändert
             *     * `custom_field` - Benutzerdefiniertes Feld
             */
            schedule_date_field?: components["schemas"]["ScheduleDateFieldEnum"];
            /** Benutzerdefiniertes Zeitplan-Datumsfeld */
            schedule_date_custom_field?: number | null;
        };
        /**
         * @description * `0` - Systemstandard
         *     * `1` - Text, dann HTML
         *     * `2` - HTML, dann Text
         *     * `3` - Nur HTML
         *     * `4` - Nur Text
         * @enum {integer}
         */
        PdfLayoutEnum: 0 | 1 | 2 | 3 | 4;
        PostDocumentRequest: {
            /** Format: date-time */
            created?: string | null;
            /** Format: binary */
            document: string;
            title?: string;
            correspondent?: number | null;
            document_type?: number | null;
            storage_path?: number | null;
            tags?: number[];
            /**
             * ASN
             * Format: int64
             */
            archive_serial_number?: number;
            custom_fields?: number[];
            /** Documents are from Paperless-ngx WebUI */
            from_webui?: boolean;
        };
        Profile: {
            /** Format: email */
            email?: string;
            password?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            /** Schlüssel */
            readonly auth_token: string;
            readonly social_accounts: components["schemas"]["SocialAccount"][];
            readonly has_usable_password: boolean;
            readonly is_mfa_enabled: boolean;
        };
        /**
         * @description * `0` - Titel enthält
         *     * `1` - Inhalt enthält
         *     * `2` - ASN ist
         *     * `3` - Korrespondent ist
         *     * `4` - Dokumenttyp ist
         *     * `5` - Ist im Posteingang
         *     * `6` - Hat Tag
         *     * `7` - Hat irgendein Tag
         *     * `8` - Ausgestellt vor
         *     * `9` - Ausgestellt nach
         *     * `10` - Ausgestellt im Jahr
         *     * `11` - Ausgestellt im Monat
         *     * `12` - Ausstellungstag ist
         *     * `13` - Hinzugefügt vor
         *     * `14` - Hinzugefügt nach
         *     * `15` - Geändert vor
         *     * `16` - Geändert nach
         *     * `17` - Hat nicht folgendes Tag
         *     * `18` - Dokument hat keine ASN
         *     * `19` - Titel oder Inhalt enthält
         *     * `20` - Volltextsuche
         *     * `21` - Ähnliche Dokumente
         *     * `22` - hat Tags in
         *     * `23` - ASN größer als
         *     * `24` - ASN kleiner als
         *     * `25` - Speicherpfad ist
         *     * `26` - hat Korrespondenten in
         *     * `27` - hat keinen Korrespondenten in
         *     * `28` - hat Dokumenttyp in
         *     * `29` - hat keinen Dokumenttyp in
         *     * `30` - hat Speicherpfad in
         *     * `31` - hat keinen Speicherpfad in
         *     * `32` - Eigentümer ist
         *     * `33` - hat Eigentümer in
         *     * `34` - hat keinen Eigentümer
         *     * `35` - hat keinen Eigentümer in
         *     * `36` - Hat benutzerdefinierten Feld-Wert
         *     * `37` - Ist von mir freigegeben
         *     * `38` - hat benutzerdefinierte Felder
         *     * `39` - hat die benutzerdefinierten Felder
         *     * `40` - hat nicht die benutzerdefinierten Felder
         *     * `41` - hat nicht das benutzerdefinierte Feld
         *     * `42` - benutzerdefinierte Feldabfrage
         *     * `43` - erstellt zu
         *     * `44` - erstellt von
         *     * `45` - hinzugefügt zu
         *     * `46` - hinzugefügt von
         *     * `47` - MIME-Typ ist
         * @enum {integer}
         */
        RuleTypeEnum: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47;
        SanityCheck: {
            status: string;
            error: string;
            /** Format: date-time */
            last_run: string;
        };
        SavedView: {
            readonly id: number;
            name: string;
            /** Auf Startseite zeigen */
            show_on_dashboard: boolean;
            /** In Seitenleiste zeigen */
            show_in_sidebar: boolean;
            /** Sortierfeld */
            sort_field?: string | null;
            /** Umgekehrte Sortierung */
            sort_reverse?: boolean;
            filter_rules: components["schemas"]["SavedViewFilterRule"][];
            /**
             * Ansichts-Seitengröße
             * Format: int64
             */
            page_size?: number | null;
            /** Ansichts-Anzeigemodus */
            display_mode?: (components["schemas"]["DisplayModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Angezeigte Dokumentenfelder */
            display_fields?: unknown;
            /** Eigentümer */
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        SavedViewFilterRule: {
            /** Regeltyp */
            rule_type: components["schemas"]["RuleTypeEnum"];
            /** Wert */
            value?: string | null;
        };
        SavedViewFilterRuleRequest: {
            /** Regeltyp */
            rule_type: components["schemas"]["RuleTypeEnum"];
            /** Wert */
            value?: string | null;
        };
        SavedViewRequest: {
            name: string;
            /** Auf Startseite zeigen */
            show_on_dashboard: boolean;
            /** In Seitenleiste zeigen */
            show_in_sidebar: boolean;
            /** Sortierfeld */
            sort_field?: string | null;
            /** Umgekehrte Sortierung */
            sort_reverse?: boolean;
            filter_rules: components["schemas"]["SavedViewFilterRuleRequest"][];
            /**
             * Ansichts-Seitengröße
             * Format: int64
             */
            page_size?: number | null;
            /** Ansichts-Anzeigemodus */
            display_mode?: (components["schemas"]["DisplayModeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Angezeigte Dokumentenfelder */
            display_fields?: unknown;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        /**
         * @description * `added` - Hinzugefügt
         *     * `created` - Ausgestellt
         *     * `modified` - Geändert
         *     * `custom_field` - Benutzerdefiniertes Feld
         * @enum {string}
         */
        ScheduleDateFieldEnum: "added" | "created" | "modified" | "custom_field";
        SearchResult: {
            total: number;
            documents: components["schemas"]["Document"][];
            saved_views: components["schemas"]["SavedView"][];
            tags: components["schemas"]["Tag"][];
            correspondents: components["schemas"]["Correspondent"][];
            document_types: components["schemas"]["DocumentType"][];
            storage_paths: components["schemas"]["StoragePath"][];
            users: components["schemas"]["User"][];
            groups: components["schemas"]["Group"][];
            mail_rules: components["schemas"]["MailRule"][];
            mail_accounts: components["schemas"]["MailAccount"][];
            workflows: components["schemas"]["Workflow"][];
            custom_fields: components["schemas"]["CustomField"][];
        };
        SelectionData: {
            selected_correspondents: components["schemas"]["CorrespondentCounts"][];
            selected_tags: components["schemas"]["TagCounts"][];
            selected_document_types: components["schemas"]["DocumentTypeCounts"][];
            selected_storage_paths: components["schemas"]["StoragePathCounts"][];
            selected_custom_fields: components["schemas"]["CustomFieldCounts"][];
        };
        ShareLink: {
            readonly id: number;
            /**
             * Erstellt
             * Format: date-time
             */
            readonly created: string;
            /**
             * Ablauf
             * Format: date-time
             */
            expiration?: string | null;
            readonly slug: string;
            /** Dokument */
            document?: number;
            file_version?: components["schemas"]["FileVersionEnum"];
        };
        ShareLinkRequest: {
            /**
             * Ablauf
             * Format: date-time
             */
            expiration?: string | null;
            /** Dokument */
            document?: number;
            file_version?: components["schemas"]["FileVersionEnum"];
        };
        /**
         * @description * `never` - nie
         *     * `with_text` - with_text
         *     * `always` - immer
         * @enum {string}
         */
        SkipArchiveFileEnum: "never" | "with_text" | "always";
        SocialAccount: {
            readonly id: number;
            /** Anbieter */
            provider: string;
            readonly name: string;
        };
        SocialAccountRequest: {
            /** Anbieter */
            provider: string;
        };
        /**
         * @description * `1` - Importordner
         *     * `2` - API-Upload
         *     * `3` - E-Mail-Abruf
         *     * `4` - Weboberfläche
         * @enum {integer}
         */
        SourcesEnum: 1 | 2 | 3 | 4;
        /**
         * @description * `FAILURE` - FAILURE
         *     * `PENDING` - PENDING
         *     * `RECEIVED` - RECEIVED
         *     * `RETRY` - RETRY
         *     * `REVOKED` - REVOKED
         *     * `STARTED` - STARTED
         *     * `SUCCESS` - SUCCESS
         * @enum {string}
         */
        StatusEnum: "FAILURE" | "PENDING" | "RECEIVED" | "RETRY" | "REVOKED" | "STARTED" | "SUCCESS";
        Storage: {
            total: number;
            available: number;
        };
        StoragePath: {
            readonly id: number;
            readonly slug: string;
            name: string;
            /** Pfad */
            path: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            readonly document_count: number;
            /** Eigentümer */
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        StoragePathCounts: {
            id: number;
            document_count: number;
        };
        StoragePathRequest: {
            name: string;
            /** Pfad */
            path: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        Suggestions: {
            correspondents: number[];
            tags: number[];
            document_types: number[];
            storage_paths: number[];
            dates: string[];
        };
        SystemStatus: {
            pngx_version: string;
            server_os: string;
            install_type: string;
            storage: components["schemas"]["Storage"];
            database: components["schemas"]["Database"];
            tasks: components["schemas"]["Tasks"];
            index: components["schemas"]["Index"];
            classifier: components["schemas"]["Classifier"];
            sanity_check: components["schemas"]["SanityCheck"];
        };
        Tag: {
            readonly id: number;
            readonly slug: string;
            name: string;
            /** Farbe */
            color?: string;
            readonly text_color: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /**
             * Posteingangs-Tag
             * @description Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.
             */
            is_inbox_tag?: boolean;
            readonly document_count: number;
            /** Eigentümer */
            owner?: number | null;
            readonly user_can_change: boolean;
        };
        TagCounts: {
            id: number;
            document_count: number;
        };
        TagRequest: {
            name: string;
            /** Farbe */
            color?: string;
            /** Zuweisungsmuster */
            match?: string;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["MatchingAlgorithm"];
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /**
             * Posteingangs-Tag
             * @description Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.
             */
            is_inbox_tag?: boolean;
            /** Eigentümer */
            owner?: number | null;
            set_permissions?: {
                view?: {
                    users?: number[];
                    groups?: number[];
                };
                change?: {
                    users?: number[];
                    groups?: number[];
                };
            };
        };
        /**
         * @description * `consume_file` - Datei verarbeiten
         *     * `train_classifier` - Klassifikator trainieren
         *     * `check_sanity` - Plausibilität prüfen
         *     * `index_optimize` - Indexoptimierung
         * @enum {string}
         */
        TaskNameEnum: "consume_file" | "train_classifier" | "check_sanity" | "index_optimize";
        Tasks: {
            redis_url: string;
            redis_status: string;
            redis_error: string;
            celery_status: string;
        };
        TasksView: {
            readonly id: number;
            /**
             * Aufgaben-ID
             * @description Celery-ID für die ausgeführte Aufgabe
             */
            task_id: string;
            /**
             * Aufgabenname
             * @description Name der ausgeführten Aufgabe
             *
             *     * `consume_file` - Datei verarbeiten
             *     * `train_classifier` - Klassifikator trainieren
             *     * `check_sanity` - Plausibilität prüfen
             *     * `index_optimize` - Indexoptimierung
             */
            task_name?: (components["schemas"]["TaskNameEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Aufgaben-Dateiname
             * @description Name der Datei, für die die Aufgabe ausgeführt wurde
             */
            task_file_name?: string | null;
            /**
             * Erstellungsdatum/-zeit
             * Format: date-time
             * @description Zeitpunkt, an dem das Ergebnis der Aufgabe erstellt wurde (in UTC)
             */
            date_created?: string | null;
            /**
             * Abschlussdatum/-zeit
             * Format: date-time
             * @description Zeitpunkt, an dem die Aufgabe abgeschlossen wurde (in UTC)
             */
            date_done?: string | null;
            /**
             * Aufgabentyp
             * @description Art der ausgeführten Aufgabe
             *
             *     * `auto_task` - Automatische Aufgabe
             *     * `scheduled_task` - Geplante Aufgabe
             *     * `manual_task` - Manuelle Aufgabe
             */
            type?: components["schemas"]["TasksViewTypeEnum"];
            /**
             * Aufgabenstatus
             * @description Aktueller Status der laufenden Aufgabe
             *
             *     * `FAILURE` - FAILURE
             *     * `PENDING` - PENDING
             *     * `RECEIVED` - RECEIVED
             *     * `RETRY` - RETRY
             *     * `REVOKED` - REVOKED
             *     * `STARTED` - STARTED
             *     * `SUCCESS` - SUCCESS
             */
            status?: components["schemas"]["StatusEnum"];
            /**
             * Ergebnisdaten
             * @description Die von der Aufgabe zurückgegebenen Daten
             */
            result?: string | null;
            /**
             * Bestätigt
             * @description Wenn die Aufgabe über die Benutzeroberfläche oder die API bestätigt wird
             */
            acknowledged?: boolean;
            readonly related_document: string | null;
            /** Eigentümer */
            owner?: number | null;
        };
        TasksViewRequest: {
            /**
             * Aufgaben-ID
             * @description Celery-ID für die ausgeführte Aufgabe
             */
            task_id: string;
            /**
             * Aufgabenname
             * @description Name der ausgeführten Aufgabe
             *
             *     * `consume_file` - Datei verarbeiten
             *     * `train_classifier` - Klassifikator trainieren
             *     * `check_sanity` - Plausibilität prüfen
             *     * `index_optimize` - Indexoptimierung
             */
            task_name?: (components["schemas"]["TaskNameEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * Aufgaben-Dateiname
             * @description Name der Datei, für die die Aufgabe ausgeführt wurde
             */
            task_file_name?: string | null;
            /**
             * Erstellungsdatum/-zeit
             * Format: date-time
             * @description Zeitpunkt, an dem das Ergebnis der Aufgabe erstellt wurde (in UTC)
             */
            date_created?: string | null;
            /**
             * Abschlussdatum/-zeit
             * Format: date-time
             * @description Zeitpunkt, an dem die Aufgabe abgeschlossen wurde (in UTC)
             */
            date_done?: string | null;
            /**
             * Aufgabentyp
             * @description Art der ausgeführten Aufgabe
             *
             *     * `auto_task` - Automatische Aufgabe
             *     * `scheduled_task` - Geplante Aufgabe
             *     * `manual_task` - Manuelle Aufgabe
             */
            type?: components["schemas"]["TasksViewTypeEnum"];
            /**
             * Aufgabenstatus
             * @description Aktueller Status der laufenden Aufgabe
             *
             *     * `FAILURE` - FAILURE
             *     * `PENDING` - PENDING
             *     * `RECEIVED` - RECEIVED
             *     * `RETRY` - RETRY
             *     * `REVOKED` - REVOKED
             *     * `STARTED` - STARTED
             *     * `SUCCESS` - SUCCESS
             */
            status?: components["schemas"]["StatusEnum"];
            /**
             * Ergebnisdaten
             * @description Die von der Aufgabe zurückgegebenen Daten
             */
            result?: string | null;
            /**
             * Bestätigt
             * @description Wenn die Aufgabe über die Benutzeroberfläche oder die API bestätigt wird
             */
            acknowledged?: boolean;
            /** Eigentümer */
            owner?: number | null;
        };
        /**
         * @description * `auto_task` - Automatische Aufgabe
         *     * `scheduled_task` - Geplante Aufgabe
         *     * `manual_task` - Manuelle Aufgabe
         * @enum {string}
         */
        TasksViewTypeEnum: "auto_task" | "scheduled_task" | "manual_task";
        /**
         * @description * `restore` - restore
         *     * `empty` - empty
         * @enum {string}
         */
        TrashActionEnum: "restore" | "empty";
        TrashRequest: {
            documents?: number[];
            action: components["schemas"]["TrashActionEnum"];
        };
        UiSettingsView: {
            readonly id: number;
            settings?: unknown;
        };
        UiSettingsViewRequest: {
            settings?: unknown;
        };
        /**
         * @description * `clean` - bereinigen
         *     * `clean-final` - clean-final
         *     * `none` - keine
         * @enum {string}
         */
        UnpaperCleanEnum: "clean" | "clean-final" | "none";
        User: {
            readonly id: number;
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            username: string;
            /**
             * E-Mail-Adresse
             * Format: email
             */
            email?: string;
            password?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            /**
             * Registrierdatum
             * Format: date-time
             */
            date_joined?: string;
            /**
             * Mitarbeiter-Status
             * @description Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
             */
            is_staff?: boolean;
            /**
             * Aktiv
             * @description Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
             */
            is_active?: boolean;
            /**
             * Administrator-Status
             * @description Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
             */
            is_superuser?: boolean;
            /**
             * Gruppen
             * @description Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
             */
            groups?: number[];
            user_permissions?: string[];
            readonly inherited_permissions: string[];
            readonly is_mfa_enabled: boolean;
        };
        UserRequest: {
            /**
             * Benutzername
             * @description Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
             */
            username: string;
            /**
             * E-Mail-Adresse
             * Format: email
             */
            email?: string;
            password?: string;
            /** Vorname */
            first_name?: string;
            /** Nachname */
            last_name?: string;
            /**
             * Registrierdatum
             * Format: date-time
             */
            date_joined?: string;
            /**
             * Mitarbeiter-Status
             * @description Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
             */
            is_staff?: boolean;
            /**
             * Aktiv
             * @description Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
             */
            is_active?: boolean;
            /**
             * Administrator-Status
             * @description Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
             */
            is_superuser?: boolean;
            /**
             * Gruppen
             * @description Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
             */
            groups?: number[];
            user_permissions?: string[];
        };
        Workflow: {
            readonly id: number;
            name: string;
            order?: number;
            /** Aktiviert */
            enabled?: boolean;
            triggers: components["schemas"]["WorkflowTrigger"][];
            actions: components["schemas"]["WorkflowAction"][];
        };
        WorkflowAction: {
            id?: number | null;
            /** Arbeitsablauf-Aktionstyp */
            type?: components["schemas"]["WorkflowActionTypeEnum"];
            /**
             * Titel zuweisen
             * @description Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.
             */
            assign_title?: string | null;
            assign_tags?: (number | null)[];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            assign_storage_path?: number | null;
            /** Diesen Eigentümer zuordnen */
            assign_owner?: number | null;
            /** Diesen Benutzern Anzeigeberechtigungen erteilen */
            assign_view_users?: number[];
            /** Diesen Gruppen Anzeigeberechtigungen erteilen */
            assign_view_groups?: number[];
            /** Diesen Benutzern Bearbeitungsberechtigungen erteilen */
            assign_change_users?: number[];
            /** Diesen Gruppen Bearbeitungsberechtigungen erteilen */
            assign_change_groups?: number[];
            /** Diese benutzerdefinierten Felder zuweisen */
            assign_custom_fields?: number[];
            /**
             * Benutzerdefinierte Feldwerte
             * @description Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.
             */
            assign_custom_fields_values?: unknown;
            /** Alle Tags entfernen */
            remove_all_tags?: boolean;
            /** Diese(n) Tag(s) entfernen */
            remove_tags?: number[];
            /** Alle Korrespondenten entfernen */
            remove_all_correspondents?: boolean;
            /** Diese(n) Korrespondenten entfernen */
            remove_correspondents?: number[];
            /** Alle Dokumenttypen entfernen */
            remove_all_document_types?: boolean;
            /** Diese(n) Dokumenttyp(en) entfernen */
            remove_document_types?: number[];
            /** Alle Speicherpfade entfernen */
            remove_all_storage_paths?: boolean;
            /** Diese(n) Speicherpfad(e) entfernen */
            remove_storage_paths?: number[];
            /** Diese benutzerdefinierten Felder entfernen */
            remove_custom_fields?: number[];
            /** Alle benutzerdefinierten Felder entfernen */
            remove_all_custom_fields?: boolean;
            /** Alle Eigentümer entfernen */
            remove_all_owners?: boolean;
            /** Diese(n) Eigentümer entfernen */
            remove_owners?: number[];
            /** Alle Berechtigungen entfernen */
            remove_all_permissions?: boolean;
            /** Anzeigeberechtigungen für diese Benutzer entfernen */
            remove_view_users?: number[];
            /** Anzeigeberechtigungen für diese Gruppen entfernen */
            remove_view_groups?: number[];
            /** Bearbeitungsberechtigungen für diese Benutzer entfernen */
            remove_change_users?: number[];
            /** Bearbeitungsberechtigungen für diese Gruppen entfernen */
            remove_change_groups?: number[];
            email?: components["schemas"]["WorkflowActionEmail"] | null;
            webhook?: components["schemas"]["WorkflowActionWebhook"] | null;
        };
        WorkflowActionEmail: {
            id?: number | null;
            /**
             * E-Mail-Betreff
             * @description Der Betreff der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
             */
            subject: string;
            /**
             * E-Mail-Inhalt
             * @description Der Text der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
             */
            body: string;
            /**
             * E-Mails an
             * @description Die Empfänger-E-Mail-Adressen, kommagetrennt.
             */
            to: string;
            /** Dokument in E-Mail einbeziehen */
            include_document?: boolean;
        };
        WorkflowActionEmailRequest: {
            id?: number | null;
            /**
             * E-Mail-Betreff
             * @description Der Betreff der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
             */
            subject: string;
            /**
             * E-Mail-Inhalt
             * @description Der Text der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
             */
            body: string;
            /**
             * E-Mails an
             * @description Die Empfänger-E-Mail-Adressen, kommagetrennt.
             */
            to: string;
            /** Dokument in E-Mail einbeziehen */
            include_document?: boolean;
        };
        WorkflowActionRequest: {
            id?: number | null;
            /** Arbeitsablauf-Aktionstyp */
            type?: components["schemas"]["WorkflowActionTypeEnum"];
            /**
             * Titel zuweisen
             * @description Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.
             */
            assign_title?: string | null;
            assign_tags?: (number | null)[];
            assign_correspondent?: number | null;
            assign_document_type?: number | null;
            assign_storage_path?: number | null;
            /** Diesen Eigentümer zuordnen */
            assign_owner?: number | null;
            /** Diesen Benutzern Anzeigeberechtigungen erteilen */
            assign_view_users?: number[];
            /** Diesen Gruppen Anzeigeberechtigungen erteilen */
            assign_view_groups?: number[];
            /** Diesen Benutzern Bearbeitungsberechtigungen erteilen */
            assign_change_users?: number[];
            /** Diesen Gruppen Bearbeitungsberechtigungen erteilen */
            assign_change_groups?: number[];
            /** Diese benutzerdefinierten Felder zuweisen */
            assign_custom_fields?: number[];
            /**
             * Benutzerdefinierte Feldwerte
             * @description Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.
             */
            assign_custom_fields_values?: unknown;
            /** Alle Tags entfernen */
            remove_all_tags?: boolean;
            /** Diese(n) Tag(s) entfernen */
            remove_tags?: number[];
            /** Alle Korrespondenten entfernen */
            remove_all_correspondents?: boolean;
            /** Diese(n) Korrespondenten entfernen */
            remove_correspondents?: number[];
            /** Alle Dokumenttypen entfernen */
            remove_all_document_types?: boolean;
            /** Diese(n) Dokumenttyp(en) entfernen */
            remove_document_types?: number[];
            /** Alle Speicherpfade entfernen */
            remove_all_storage_paths?: boolean;
            /** Diese(n) Speicherpfad(e) entfernen */
            remove_storage_paths?: number[];
            /** Diese benutzerdefinierten Felder entfernen */
            remove_custom_fields?: number[];
            /** Alle benutzerdefinierten Felder entfernen */
            remove_all_custom_fields?: boolean;
            /** Alle Eigentümer entfernen */
            remove_all_owners?: boolean;
            /** Diese(n) Eigentümer entfernen */
            remove_owners?: number[];
            /** Alle Berechtigungen entfernen */
            remove_all_permissions?: boolean;
            /** Anzeigeberechtigungen für diese Benutzer entfernen */
            remove_view_users?: number[];
            /** Anzeigeberechtigungen für diese Gruppen entfernen */
            remove_view_groups?: number[];
            /** Bearbeitungsberechtigungen für diese Benutzer entfernen */
            remove_change_users?: number[];
            /** Bearbeitungsberechtigungen für diese Gruppen entfernen */
            remove_change_groups?: number[];
            email?: components["schemas"]["WorkflowActionEmailRequest"] | null;
            webhook?: components["schemas"]["WorkflowActionWebhookRequest"] | null;
        };
        /**
         * @description * `1` - Zuordnung
         *     * `2` - Entfernung
         *     * `3` - E-Mail
         *     * `4` - Webhook
         * @enum {integer}
         */
        WorkflowActionTypeEnum: 1 | 2 | 3 | 4;
        WorkflowActionWebhook: {
            id?: number | null;
            /**
             * Webhook-URL
             * @description Die Ziel-URL für die Benachrichtigung.
             */
            url: string;
            /** Verwende Parameter */
            use_params?: boolean;
            /** Als JSON senden */
            as_json?: boolean;
            /**
             * Webhook-Parameter
             * @description Die Parameter, die mit der Webhook-URL gesendet werden sollen, wenn kein Inhalt verwendet wird.
             */
            params?: unknown;
            /**
             * Webhook-Inhalt
             * @description Der Inhalt, der mit der Webhook-URL gesendet werden soll, wenn Parameter nicht verwendet werden.
             */
            body?: string | null;
            /**
             * Webhook-Kopfzeilen
             * @description Die Kopfzeilen, die mit der Webhook-URL gesendet werden sollen.
             */
            headers?: unknown;
            /** Dokument in Webhook einbeziehen */
            include_document?: boolean;
        };
        WorkflowActionWebhookRequest: {
            id?: number | null;
            /**
             * Webhook-URL
             * @description Die Ziel-URL für die Benachrichtigung.
             */
            url: string;
            /** Verwende Parameter */
            use_params?: boolean;
            /** Als JSON senden */
            as_json?: boolean;
            /**
             * Webhook-Parameter
             * @description Die Parameter, die mit der Webhook-URL gesendet werden sollen, wenn kein Inhalt verwendet wird.
             */
            params?: unknown;
            /**
             * Webhook-Inhalt
             * @description Der Inhalt, der mit der Webhook-URL gesendet werden soll, wenn Parameter nicht verwendet werden.
             */
            body?: string | null;
            /**
             * Webhook-Kopfzeilen
             * @description Die Kopfzeilen, die mit der Webhook-URL gesendet werden sollen.
             */
            headers?: unknown;
            /** Dokument in Webhook einbeziehen */
            include_document?: boolean;
        };
        WorkflowRequest: {
            name: string;
            order?: number;
            /** Aktiviert */
            enabled?: boolean;
            triggers: components["schemas"]["WorkflowTriggerRequest"][];
            actions: components["schemas"]["WorkflowActionRequest"][];
        };
        WorkflowTrigger: {
            id?: number | null;
            /** @default [
             *       1,
             *       2,
             *       3
             *     ] */
            sources: components["schemas"]["SourcesEnum"][];
            /** Trigger Type */
            type: components["schemas"]["WorkflowTriggerTypeEnum"];
            /**
             * Pfad filtern
             * @description Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_path?: string | null;
            /**
             * Dateinamen filtern
             * @description Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_filename?: string | null;
            /** Dokumente aus dieser E-Mail-Regel filtern */
            filter_mailrule?: number | null;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["WorkflowTriggerMatchingAlgorithmEnum"];
            /** Zuweisungsmuster */
            match?: string;
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Hat diese(n) Tag(s) */
            filter_has_tags?: number[];
            /** Hat diesen Korrespondenten */
            filter_has_correspondent?: number | null;
            /** Hat diesen Dokumenttyp */
            filter_has_document_type?: number | null;
            /**
             * Zeitplanversatz (Tage)
             * Format: int64
             * @description Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.
             */
            schedule_offset_days?: number;
            /**
             * Zeitplan wiederholt sich
             * @description Ob der Zeitplan wiederholt werden soll.
             */
            schedule_is_recurring?: boolean;
            /**
             * Zeitplan-Wiederholungsverzögerung in Tagen
             * Format: int64
             * @description Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.
             */
            schedule_recurring_interval_days?: number;
            /**
             * Zeitplan-Datumsfeld
             * @description Das zu prüfende Feld für einen Zeitplanauslöser.
             *
             *     * `added` - Hinzugefügt
             *     * `created` - Ausgestellt
             *     * `modified` - Geändert
             *     * `custom_field` - Benutzerdefiniertes Feld
             */
            schedule_date_field?: components["schemas"]["ScheduleDateFieldEnum"];
            /** Benutzerdefiniertes Zeitplan-Datumsfeld */
            schedule_date_custom_field?: number | null;
        };
        /**
         * @description * `0` - Keiner
         *     * `1` - Irgendein Wort
         *     * `2` - Alle Wörter
         *     * `3` - Exakte Übereinstimmung
         *     * `4` - Regulärer Ausdruck
         *     * `5` - Ungenaues Wort
         * @enum {integer}
         */
        WorkflowTriggerMatchingAlgorithmEnum: 0 | 1 | 2 | 3 | 4 | 5;
        WorkflowTriggerRequest: {
            id?: number | null;
            /** @default [
             *       1,
             *       2,
             *       3
             *     ] */
            sources: components["schemas"]["SourcesEnum"][];
            /** Trigger Type */
            type: components["schemas"]["WorkflowTriggerTypeEnum"];
            /**
             * Pfad filtern
             * @description Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_path?: string | null;
            /**
             * Dateinamen filtern
             * @description Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
             */
            filter_filename?: string | null;
            /** Dokumente aus dieser E-Mail-Regel filtern */
            filter_mailrule?: number | null;
            /** Zuweisungsalgorithmus */
            matching_algorithm?: components["schemas"]["WorkflowTriggerMatchingAlgorithmEnum"];
            /** Zuweisungsmuster */
            match?: string;
            /** Groß-/Kleinschreibung irrelevant */
            is_insensitive?: boolean;
            /** Hat diese(n) Tag(s) */
            filter_has_tags?: number[];
            /** Hat diesen Korrespondenten */
            filter_has_correspondent?: number | null;
            /** Hat diesen Dokumenttyp */
            filter_has_document_type?: number | null;
            /**
             * Zeitplanversatz (Tage)
             * Format: int64
             * @description Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.
             */
            schedule_offset_days?: number;
            /**
             * Zeitplan wiederholt sich
             * @description Ob der Zeitplan wiederholt werden soll.
             */
            schedule_is_recurring?: boolean;
            /**
             * Zeitplan-Wiederholungsverzögerung in Tagen
             * Format: int64
             * @description Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.
             */
            schedule_recurring_interval_days?: number;
            /**
             * Zeitplan-Datumsfeld
             * @description Das zu prüfende Feld für einen Zeitplanauslöser.
             *
             *     * `added` - Hinzugefügt
             *     * `created` - Ausgestellt
             *     * `modified` - Geändert
             *     * `custom_field` - Benutzerdefiniertes Feld
             */
            schedule_date_field?: components["schemas"]["ScheduleDateFieldEnum"];
            /** Benutzerdefiniertes Zeitplan-Datumsfeld */
            schedule_date_custom_field?: number | null;
        };
        /**
         * @description * `1` - Verarbeitung gestartet
         *     * `2` - Dokument hinzugefügt
         *     * `3` - Dokument aktualisiert
         *     * `4` - Geplant
         * @enum {integer}
         */
        WorkflowTriggerTypeEnum: 1 | 2 | 3 | 4;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    bulk_edit_objects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkEditObjectsRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkEditResult"];
                };
            };
        };
    };
    config_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"][];
                };
            };
        };
    };
    config_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationConfigurationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ApplicationConfigurationRequest"];
                "multipart/form-data": components["schemas"]["ApplicationConfigurationRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    config_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Paperless-ngx-Anwendungseinstellungen. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    config_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Paperless-ngx-Anwendungseinstellungen. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationConfigurationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ApplicationConfigurationRequest"];
                "multipart/form-data": components["schemas"]["ApplicationConfigurationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    config_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Paperless-ngx-Anwendungseinstellungen. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    config_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Paperless-ngx-Anwendungseinstellungen. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedApplicationConfigurationRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedApplicationConfigurationRequest"];
                "multipart/form-data": components["schemas"]["PatchedApplicationConfigurationRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationConfiguration"];
                };
            };
        };
    };
    correspondents_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCorrespondentList"];
                };
            };
        };
    };
    correspondents_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorrespondentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CorrespondentRequest"];
                "multipart/form-data": components["schemas"]["CorrespondentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    correspondents_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Korrespondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    correspondents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Korrespondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorrespondentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CorrespondentRequest"];
                "multipart/form-data": components["schemas"]["CorrespondentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    correspondents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Korrespondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    correspondents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Korrespondent. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCorrespondentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCorrespondentRequest"];
                "multipart/form-data": components["schemas"]["PatchedCorrespondentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Correspondent"];
                };
            };
        };
    };
    custom_fields_list: {
        parameters: {
            query?: {
                id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCustomFieldList"];
                };
            };
        };
    };
    custom_fields_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomFieldRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomFieldRequest"];
                "multipart/form-data": components["schemas"]["CustomFieldRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    custom_fields_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzerdefiniertes Feld. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    custom_fields_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzerdefiniertes Feld. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomFieldRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomFieldRequest"];
                "multipart/form-data": components["schemas"]["CustomFieldRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    custom_fields_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzerdefiniertes Feld. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    custom_fields_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzerdefiniertes Feld. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCustomFieldRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCustomFieldRequest"];
                "multipart/form-data": components["schemas"]["PatchedCustomFieldRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomField"];
                };
            };
        };
    };
    document_types_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumentTypeList"];
                };
            };
        };
    };
    document_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentTypeRequest"];
                "multipart/form-data": components["schemas"]["DocumentTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    document_types_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokumenttyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    document_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokumenttyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentTypeRequest"];
                "multipart/form-data": components["schemas"]["DocumentTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    document_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokumenttyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    document_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokumenttyp. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDocumentTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDocumentTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedDocumentTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentType"];
                };
            };
        };
    };
    documents_list: {
        parameters: {
            query?: {
                added__date__gt?: string;
                added__date__gte?: string;
                added__date__lt?: string;
                added__date__lte?: string;
                added__day?: number;
                added__gt?: string;
                added__gte?: string;
                added__lt?: string;
                added__lte?: string;
                added__month?: number;
                added__year?: number;
                archive_serial_number?: number;
                archive_serial_number__gt?: number;
                archive_serial_number__gte?: number;
                archive_serial_number__isnull?: boolean;
                archive_serial_number__lt?: number;
                archive_serial_number__lte?: number;
                checksum__icontains?: string;
                checksum__iendswith?: string;
                checksum__iexact?: string;
                checksum__istartswith?: string;
                content__icontains?: string;
                content__iendswith?: string;
                content__iexact?: string;
                content__istartswith?: string;
                correspondent__id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                correspondent__id__in?: number[];
                correspondent__id__none?: number;
                correspondent__isnull?: boolean;
                correspondent__name__icontains?: string;
                correspondent__name__iendswith?: string;
                correspondent__name__iexact?: string;
                correspondent__name__istartswith?: string;
                created__date__gt?: string;
                created__date__gte?: string;
                created__date__lt?: string;
                created__date__lte?: string;
                created__day?: number;
                created__gt?: string;
                created__gte?: string;
                created__lt?: string;
                created__lte?: string;
                created__month?: number;
                created__year?: number;
                custom_field_query?: string;
                custom_fields__icontains?: string;
                custom_fields__id__all?: number;
                custom_fields__id__in?: number;
                custom_fields__id__none?: number;
                document_type__id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                document_type__id__in?: number[];
                document_type__id__none?: number;
                document_type__isnull?: boolean;
                document_type__name__icontains?: string;
                document_type__name__iendswith?: string;
                document_type__name__iexact?: string;
                document_type__name__istartswith?: string;
                fields?: string[];
                full_perms?: boolean;
                /** @description Has custom field */
                has_custom_fields?: boolean;
                id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                id__in?: number[];
                is_in_inbox?: boolean;
                /** @description Is tagged */
                is_tagged?: boolean;
                mime_type?: string;
                modified__date__gt?: string;
                modified__date__gte?: string;
                modified__date__lt?: string;
                modified__date__lte?: string;
                modified__day?: number;
                modified__gt?: string;
                modified__gte?: string;
                modified__lt?: string;
                modified__lte?: string;
                modified__month?: number;
                modified__year?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                original_filename__icontains?: string;
                original_filename__iendswith?: string;
                original_filename__iexact?: string;
                original_filename__istartswith?: string;
                owner__id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                owner__id__in?: number[];
                owner__id__none?: number;
                owner__isnull?: boolean;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                shared_by__id?: boolean;
                storage_path__id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                storage_path__id__in?: number[];
                storage_path__id__none?: number;
                storage_path__isnull?: boolean;
                storage_path__name__icontains?: string;
                storage_path__name__iendswith?: string;
                storage_path__name__iexact?: string;
                storage_path__name__istartswith?: string;
                tags__id?: number;
                tags__id__all?: number;
                tags__id__in?: number;
                tags__id__none?: number;
                tags__name__icontains?: string;
                tags__name__iendswith?: string;
                tags__name__iexact?: string;
                tags__name__istartswith?: string;
                title__icontains?: string;
                title__iendswith?: string;
                title__iexact?: string;
                title__istartswith?: string;
                title_content?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumentList"];
                };
            };
        };
    };
    documents_retrieve: {
        parameters: {
            query?: {
                fields?: string[];
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentRequest"];
                "multipart/form-data": components["schemas"]["DocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDocumentRequest"];
                "multipart/form-data": components["schemas"]["PatchedDocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_download_retrieve: {
        parameters: {
            query?: {
                original?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    documents_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentRequest"];
                "multipart/form-data": components["schemas"]["DocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_history_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLogEntryList"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_metadata_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metadata"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_notes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        note?: string;
                        /** Format: date-time */
                        created?: string;
                        user?: {
                            id?: number;
                            username?: string;
                            first_name?: string;
                            last_name?: string;
                        };
                    }[];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_notes_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["DocumentRequest"];
                "multipart/form-data": components["schemas"]["DocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        note?: string;
                        /** Format: date-time */
                        created?: string;
                        user?: {
                            id?: number;
                            username?: string;
                            first_name?: string;
                            last_name?: string;
                        };
                    }[];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_notes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        note?: string;
                        /** Format: date-time */
                        created?: string;
                        user?: {
                            id?: number;
                            username?: string;
                            first_name?: string;
                            last_name?: string;
                        };
                    }[];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_preview_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    document_share_links: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: number;
                        /** Format: date-time */
                        created?: string;
                        /** Format: date-time */
                        expiration?: string;
                        slug?: string;
                    }[];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_suggestions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Suggestions"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    documents_thumb_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Dokument. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    documents_bulk_download_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkDownloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkDownload"];
                };
            };
        };
    };
    bulk_edit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkEditRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkEditDocumentsResult"];
                };
            };
        };
    };
    documents_next_asn_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Document"];
                };
            };
        };
    };
    documents_post_document_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["PostDocumentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    documents_selection_data_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["DocumentListRequest"];
                "application/json": components["schemas"]["DocumentListRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SelectionData"];
                };
            };
        };
    };
    groups_list: {
        parameters: {
            query?: {
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedGroupList"];
                };
            };
        };
    };
    groups_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupRequest"];
                "multipart/form-data": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["GroupRequest"];
                "multipart/form-data": components["schemas"]["GroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    groups_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    groups_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gruppe. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
        };
    };
    logs_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    retrieve_log: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description No response body */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_accounts_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMailAccountList"];
                };
            };
        };
    };
    mail_accounts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Konto. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Konto. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Konto. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_accounts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Konto. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMailAccountRequest"];
                "multipart/form-data": components["schemas"]["PatchedMailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_accounts_process_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Konto. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccount"];
                };
            };
        };
    };
    mail_account_test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailAccountRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailAccountRequest"];
                "multipart/form-data": components["schemas"]["MailAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailAccountTestResponse"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    mail_rules_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMailRuleList"];
                };
            };
        };
    };
    mail_rules_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailRuleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailRuleRequest"];
                "multipart/form-data": components["schemas"]["MailRuleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    mail_rules_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Regel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    mail_rules_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Regel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailRuleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MailRuleRequest"];
                "multipart/form-data": components["schemas"]["MailRuleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    mail_rules_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Regel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    mail_rules_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this E-Mail-Regel. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMailRuleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMailRuleRequest"];
                "multipart/form-data": components["schemas"]["PatchedMailRuleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailRule"];
                };
            };
        };
    };
    oauth_callback_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    profile_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    profile_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProfileRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProfileRequest"];
                "multipart/form-data": components["schemas"]["PatchedProfileRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    profile_disconnect_social_account_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    id: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    profile_generate_auth_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    profile_social_account_providers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    profile_totp_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    profile_totp_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    secret: string;
                    code: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    profile_totp_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    remote_version_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    saved_views_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSavedViewList"];
                };
            };
        };
    };
    saved_views_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedViewRequest"];
                "multipart/form-data": components["schemas"]["SavedViewRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    saved_views_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gespeicherte Ansicht. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    saved_views_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gespeicherte Ansicht. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedViewRequest"];
                "multipart/form-data": components["schemas"]["SavedViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    saved_views_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gespeicherte Ansicht. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    saved_views_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Gespeicherte Ansicht. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSavedViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSavedViewRequest"];
                "multipart/form-data": components["schemas"]["PatchedSavedViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedView"];
                };
            };
        };
    };
    search_retrieve: {
        parameters: {
            query: {
                /** @description Search only the database */
                db_only?: boolean;
                /** @description Query to search for */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResult"];
                };
            };
        };
    };
    search_autocomplete_list: {
        parameters: {
            query?: {
                /** @description Number of completions to return */
                limit?: number;
                /** @description Term to search for */
                term?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    share_links_list: {
        parameters: {
            query?: {
                created__date__gt?: string;
                created__date__gte?: string;
                created__date__lt?: string;
                created__date__lte?: string;
                created__day?: number;
                created__gt?: string;
                created__gte?: string;
                created__lt?: string;
                created__lte?: string;
                created__month?: number;
                created__year?: number;
                expiration__date__gt?: string;
                expiration__date__gte?: string;
                expiration__date__lt?: string;
                expiration__date__lte?: string;
                expiration__day?: number;
                expiration__gt?: string;
                expiration__gte?: string;
                expiration__lt?: string;
                expiration__lte?: string;
                expiration__month?: number;
                expiration__year?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedShareLinkList"];
                };
            };
        };
    };
    share_links_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ShareLinkRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ShareLinkRequest"];
                "multipart/form-data": components["schemas"]["ShareLinkRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    share_links_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Freigabelink. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    share_links_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Freigabelink. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ShareLinkRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ShareLinkRequest"];
                "multipart/form-data": components["schemas"]["ShareLinkRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    share_links_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Freigabelink. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    share_links_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Freigabelink. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedShareLinkRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedShareLinkRequest"];
                "multipart/form-data": components["schemas"]["PatchedShareLinkRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareLink"];
                };
            };
        };
    };
    statistics_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemStatus"];
                };
            };
        };
    };
    storage_paths_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                path__icontains?: string;
                path__iendswith?: string;
                path__iexact?: string;
                path__istartswith?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStoragePathList"];
                };
            };
        };
    };
    storage_paths_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StoragePathRequest"];
                "multipart/form-data": components["schemas"]["StoragePathRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Speicherpfad. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Speicherpfad. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StoragePathRequest"];
                "multipart/form-data": components["schemas"]["StoragePathRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Speicherpfad. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storage_paths_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Speicherpfad. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedStoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedStoragePathRequest"];
                "multipart/form-data": components["schemas"]["PatchedStoragePathRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    storage_paths_test_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoragePathRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StoragePathRequest"];
                "multipart/form-data": components["schemas"]["StoragePathRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoragePath"];
                };
            };
        };
    };
    tags_list: {
        parameters: {
            query?: {
                full_perms?: boolean;
                id?: number;
                /** @description Mehrere Werte können durch Kommas getrennt sein. */
                id__in?: number[];
                name__icontains?: string;
                name__iendswith?: string;
                name__iexact?: string;
                name__istartswith?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTagList"];
                };
            };
        };
    };
    tags_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TagRequest"];
                "multipart/form-data": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tags_retrieve: {
        parameters: {
            query?: {
                full_perms?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tags_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TagRequest"];
                "multipart/form-data": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tags_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tags_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Tag. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTagRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTagRequest"];
                "multipart/form-data": components["schemas"]["PatchedTagRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    tasks_list: {
        parameters: {
            query?: {
                /** @description Acknowledged */
                acknowledged?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description Aktueller Status der laufenden Aufgabe
                 *
                 *     * `FAILURE` - FAILURE
                 *     * `PENDING` - PENDING
                 *     * `RECEIVED` - RECEIVED
                 *     * `RETRY` - RETRY
                 *     * `REVOKED` - REVOKED
                 *     * `STARTED` - STARTED
                 *     * `SUCCESS` - SUCCESS */
                status?: "FAILURE" | "PENDING" | "RECEIVED" | "RETRY" | "REVOKED" | "STARTED" | "SUCCESS";
                /** @description Name der ausgeführten Aufgabe
                 *
                 *     * `consume_file` - Datei verarbeiten
                 *     * `train_classifier` - Klassifikator trainieren
                 *     * `check_sanity` - Plausibilität prüfen
                 *     * `index_optimize` - Indexoptimierung */
                task_name?: "check_sanity" | "consume_file" | "index_optimize" | "train_classifier" | null;
                /** @description Art der ausgeführten Aufgabe
                 *
                 *     * `auto_task` - Automatische Aufgabe
                 *     * `scheduled_task` - Geplante Aufgabe
                 *     * `manual_task` - Manuelle Aufgabe */
                type?: "auto_task" | "manual_task" | "scheduled_task";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TasksView"][];
                };
            };
        };
    };
    tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this paperless task. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TasksView"];
                };
            };
        };
    };
    acknowledge_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    tasks: number[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcknowledgeTasks"];
                };
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tasks_run_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TasksViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TasksViewRequest"];
                "multipart/form-data": components["schemas"]["TasksViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TasksView"];
                };
            };
        };
    };
    token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PaperlessAuthTokenRequest"];
                "multipart/form-data": components["schemas"]["PaperlessAuthTokenRequest"];
                "application/json": components["schemas"]["PaperlessAuthTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaperlessAuthToken"];
                };
            };
        };
    };
    trash_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    trash_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrashRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TrashRequest"];
                "multipart/form-data": components["schemas"]["TrashRequest"];
            };
        };
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ui_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UiSettingsView"];
                };
            };
        };
    };
    ui_settings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UiSettingsViewRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UiSettingsViewRequest"];
                "multipart/form-data": components["schemas"]["UiSettingsViewRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UiSettingsView"];
                };
            };
        };
    };
    users_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                username__icontains?: string;
                username__iendswith?: string;
                username__iexact?: string;
                username__istartswith?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserRequest"];
                "multipart/form-data": components["schemas"]["PatchedUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_deactivate_totp_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Benutzer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    workflow_actions_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowActionList"];
                };
            };
        };
    };
    workflow_actions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkflowActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowActionRequest"];
                "multipart/form-data": components["schemas"]["WorkflowActionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_actions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Workflow-Aktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_actions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Workflow-Aktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WorkflowActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowActionRequest"];
                "multipart/form-data": components["schemas"]["WorkflowActionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_actions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Workflow-Aktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflow_actions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Workflow-Aktion. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkflowActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowActionRequest"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowActionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowAction"];
                };
            };
        };
    };
    workflow_triggers_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowTriggerList"];
                };
            };
        };
    };
    workflow_triggers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTriggerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowTriggerRequest"];
                "multipart/form-data": components["schemas"]["WorkflowTriggerRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflow_triggers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Arbeitsablauf-Auslöser. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflow_triggers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Arbeitsablauf-Auslöser. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTriggerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowTriggerRequest"];
                "multipart/form-data": components["schemas"]["WorkflowTriggerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflow_triggers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Arbeitsablauf-Auslöser. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflow_triggers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Arbeitsablauf-Auslöser. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkflowTriggerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowTriggerRequest"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowTriggerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTrigger"];
                };
            };
        };
    };
    workflows_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkflowList"];
                };
            };
        };
    };
    workflows_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRequest"];
                "multipart/form-data": components["schemas"]["WorkflowRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflows_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflows_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WorkflowRequest"];
                "multipart/form-data": components["schemas"]["WorkflowRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
    workflows_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflows_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this workflow. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkflowRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkflowRequest"];
                "multipart/form-data": components["schemas"]["PatchedWorkflowRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
        };
    };
}
